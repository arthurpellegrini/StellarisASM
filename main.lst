


ARM Macro Assembler    Page 1 


    1 00000000         ;-------------------------------------------------------
                       -----
    2 00000000         ; RK - Evalbot (Cortex M3 de Texas Instrument)
    3 00000000         ;-------------------------------------------------------
                       -----
    4 00000000         ; AUTHORS - Arthur PELLEGRINI & Cl√©ment BRISSARD -- ESI
                       EE-IT
    5 00000000         ;-------------------------------------------------------
                       -----
    6 00000000         
    7 00000000                 AREA             |.text|, CODE, READONLY
    8 00000000         
    9 00000000         ; This register controls the clock gating logic in norma
                       l Run mode
   10 00000000 400FE108 
                       SYSCTL_PERIPH_GPIOF
                               EQU              0x400FE108  ;; SYSCTL_RCGC2_R (
                                                            p291 datasheet de l
                                                            m3s9b92.pdf)
   11 00000000         
   12 00000000         ; Configure the corresponding pin to be an output
   13 00000000         ; All GPIO pins are inputs by default
   14 00000000 00000400 
                       GPIO_O_DIR
                               EQU              0x00000400  ;; GPIO Direction (
                                                            p417 datasheet de l
                                                            m3s9B92.pdf)
   15 00000000         
   16 00000000         ; The GPIODR2R register is the 2-mA drive control regist
                       er
   17 00000000         ; By default, all GPIO pins have 2-mA drive.
   18 00000000 00000500 
                       GPIO_O_DR2R
                               EQU              0x00000500  ;; GPIO 2-mA Drive 
                                                            Select (p428 datash
                                                            eet de lm3s9B92.pdf
                                                            )
   19 00000000         
   20 00000000         ; Digital enable register
   21 00000000         ; To use the pin as a digital input or output, the corre
                       sponding GPIODEN bit must be set.
   22 00000000 0000051C 
                       GPIO_O_DEN
                               EQU              0x0000051C  ;; GPIO Digital Ena
                                                            ble (p437 datasheet
                                                             de lm3s9B92.pdf)
   23 00000000         
   24 00000000         ; The GPIOPUR register is the pull-up control register
   25 00000000 00000510 
                       GPIO_O_PUR
                               EQU              0x00000510  ;; GPIO Pull-Up Con
                                                            trol
   26 00000000         
   27 00000000         ; The GPIODATA register is the data register
   28 00000000 40007000 
                       GPIO_PORTD_BASE
                               EQU              0x40007000  ;; GPIO Port D (APB
                                                            ) base: 0x4000.7000
                                                            



ARM Macro Assembler    Page 2 


   29 00000000 40024000 
                       GPIO_PORTE_BASE
                               EQU              0x40024000  ;; GPIO Port E (APB
                                                            ) base: 0x4002.4000
                                                            
   30 00000000 40025000 
                       GPIO_PORTF_BASE
                               EQU              0x40025000  ;; GPIO Port F (APB
                                                            ) base: 0x4002.5000
                                                             (p416 datasheet de
                                                             lm3s9B92.pdf)
   31 00000000         
   32 00000000         ; PINS Port Input
   33 00000000 000000C0 
                       PINSD_6_7
                               EQU              0xC0        ;; Switchs 1 & 2 on
                                                             Pins 6 & 7 (1100 0
                                                            000)
   34 00000000 00000003 
                       PINSE_1_2
                               EQU              0x03        ;; Bumpers 1 & 2 on
                                                             Pins 1 & 2  (0000 
                                                            0011)
   35 00000000 00000030 
                       PINSF_4_5
                               EQU              0x30        ;; Leds 1 & 2 on Pi
                                                            ns 4 & 5  (0011 000
                                                            0)
   36 00000000         
   37 00000000         ; CONSTANTS
   38 00000000 000FFFFF 
                       WAIT_ITERATIONS
                               EQU              0x00FFFFF   ;; Number of iterat
                                                            ions to complete a 
                                                            wait
   39 00000000 0000000D 
                       ROTATION_ITERATIONS
                               EQU              0x0D        ;; Number of iterat
                                                            ions to complete a 
                                                            rotation
   40 00000000 00000019 
                       DISTANCE_ITERATIONS
                               EQU              0x19        ;; Number of iterat
                                                            ions to complete a 
                                                            distance
   41 00000000         
   42 00000000                 ENTRY
   43 00000000                 EXPORT           __main
   44 00000000         
   45 00000000         ;; The IMPORT command specifies that a symbol is defined
                        in a shared object at runtime.
   46 00000000                 IMPORT           MOTEUR_INIT ;; init motors (set
                                                            up PWMS + GPIO)
   47 00000000         
   48 00000000                 IMPORT           MOTEUR_DROIT_ON ;; enable right
                                                             motor
   49 00000000                 IMPORT           MOTEUR_DROIT_OFF ;; disable rig
                                                            ht motor
   50 00000000                 IMPORT           MOTEUR_DROIT_AVANT ;; right mot



ARM Macro Assembler    Page 3 


                                                            or turns forward
   51 00000000                 IMPORT           MOTEUR_DROIT_ARRIERE ;; right m
                                                            otor turns backward
                                                            s
   52 00000000                 IMPORT           MOTEUR_DROIT_INVERSE ;; reverse
                                                            s the right motor's
                                                             rotation direction
                                                            
   53 00000000         
   54 00000000                 IMPORT           MOTEUR_GAUCHE_ON ;; enable left
                                                             motor
   55 00000000                 IMPORT           MOTEUR_GAUCHE_OFF ;; disable le
                                                            ft motor
   56 00000000                 IMPORT           MOTEUR_GAUCHE_AVANT ;; left mot
                                                            or turns forward
   57 00000000                 IMPORT           MOTEUR_GAUCHE_ARRIERE ;; left m
                                                            otor turns backward
                                                            s
   58 00000000                 IMPORT           MOTEUR_GAUCHE_INVERSE ;; revers
                                                            es the left motor's
                                                             rotation direction
                                                            
   59 00000000         
   60 00000000         __main
   61 00000000         ;; Enable the Port F peripheral clock by setting bit 5 (
                       0x20 == 0b100000) (p291 datasheet de lm3s9B96.pdf)
   62 00000000         ;; (GPIO::FEDCBA)
   63 00000000 4D59            LDR              R5, =SYSCTL_PERIPH_GPIOF 
                                                            ;; RCGC2
   64 00000002 F04F 0938       MOV              R9, #0x00000038 ;; Store value 
                                                            to Enable clock on 
                                                            GPIO F, E and D (00
                                                            11 1000)
   65 00000006         ;; (GPIO::FEDCBA)
   66 00000006 F8C5 9000       STR              R9, [R5]    ;; Enable clock on 
                                                            GPIO F, E and D
   67 0000000A         ;; "There must be a delay of 3 system clocks before any 
                       GPIO reg. access  (p413 datasheet de lm3s9B92.pdf)
   68 0000000A BF00            NOP                          ;; very important..
                                                            .
   69 0000000C BF00            NOP
   70 0000000E BF00            NOP                          ;; not necessary in
                                                             simulation or in d
                                                            ebbug step by step.
                                                            ..
   71 00000010         
   72 00000010         ;;----------------------CONF_SWITCHS
   73 00000010 F04F 09C0       LDR              R9, =PINSD_6_7 ;; Get the value
                                                             to enable PINS 6 &
                                                             7 on PORTD
   74 00000014 4F55            LDR              R7, =GPIO_PORTD_BASE+GPIO_O_DEN
 
                                                            ;;
   75 00000016 F8C7 9000       STR              R9, [R7]    ;; Enable PINS 6 & 
                                                            7 on PORTD with GPI
                                                            O_O_DEN  
   76 0000001A 4F55            LDR              R7, =GPIO_PORTD_BASE+GPIO_O_PUR
 
                                                            ;;



ARM Macro Assembler    Page 4 


   77 0000001C F8C7 9000       STR              R9, [R7]    ;; Enable PINS 6 & 
                                                            7 on PORTD with GPI
                                                            O_O_PUR
   78 00000020 4F54            LDR              R7, =GPIO_PORTD_BASE+(PINSD_6_7
<<2) 
                                                            ;; Enable Switchs t
                                                            hat correspond to P
                                                            ORTD PINS 6 & 7 val
                                                            ues
   79 00000022         ;;----------------------END CONF_SWITCHS
   80 00000022         
   81 00000022         ;;----------------------CONF_BUMPERS
   82 00000022 F04F 0903       LDR              R9, =PINSE_1_2 ;; Get the value
                                                             to enable PINS 1 &
                                                             2 on PORTE
   83 00000026 F8DF 8150       LDR              R8, =GPIO_PORTE_BASE+GPIO_O_DEN
 
                                                            ;;
   84 0000002A F8C8 9000       STR              R9, [R8]    ;; Enable PINS 1 & 
                                                            2 on PORTE with GPI
                                                            O_O_DEN
   85 0000002E F8DF 814C       LDR              R8, =GPIO_PORTE_BASE+GPIO_O_PUR
 
                                                            ;;
   86 00000032 F8C8 9000       STR              R9, [R8]    ;; Enable PINS 1 & 
                                                            2 on PORTE with GPI
                                                            O_O_PUR
   87 00000036 F8DF 8148       LDR              R8, =GPIO_PORTE_BASE+(PINSE_1_2
<<2) 
                                                            ;; Enable Bumpers t
                                                            hat correspond to P
                                                            ORTE PINS 1 & 2 val
                                                            ues
   88 0000003A         ;;----------------------END CONF_BUMPERS
   89 0000003A         
   90 0000003A         ;;----------------------CONF_LEDS
   91 0000003A F04F 0930       LDR              R9, =PINSF_4_5 ;; Get the value
                                                             to enable PINS 4 &
                                                             5 on PORTF
   92 0000003E 4D51            LDR              R5, =GPIO_PORTF_BASE+GPIO_O_DIR
 
                                                            ;; 
   93 00000040 F8C5 9000       STR              R9, [R5]    ;; Enable PINS 4 & 
                                                            5 on PORTF with GPI
                                                            O_O_DIR
   94 00000044 4D50            LDR              R5, =GPIO_PORTF_BASE+GPIO_O_DEN
 
                                                            ;;
   95 00000046 F8C5 9000       STR              R9, [R5]    ;; Enable PINS 4 & 
                                                            5 on PORTF with GPI
                                                            O_O_DEN
   96 0000004A 4D50            LDR              R5, =GPIO_PORTF_BASE+GPIO_O_DR2
R 
                                                            ;;
   97 0000004C F8C5 9000       STR              R9, [R5]    ;; Enable PINS 4 & 
                                                            5 on PORTF with GPI
                                                            O_O_DR2R   
   98 00000050 4D4F            LDR              R5, =GPIO_PORTF_BASE+(PINSF_4_5
<<2) 



ARM Macro Assembler    Page 5 


                                                            ;; Enable LEDS that
                                                             correspond to PORT
                                                            F PINS 4 & 5 values
                                                             
   99 00000052         ;;----------------------END CONF_LEDS
  100 00000052         
  101 00000052         ;;----------------------CONF_MOTORS
  102 00000052 F7FF FFFE       BL               MOTEUR_INIT ;; Setup PWM + GPIO
                                                            
  103 00000056 F7FF FFFE       BL               MOTEUR_DROIT_ON ;; Turn on righ
                                                            t motor
  104 0000005A F7FF FFFE       BL               MOTEUR_GAUCHE_ON ;; Turn on lef
                                                            t motor
  105 0000005E F7FF FFFE       BL               MOTEUR_DROIT_AVANT ;; Set front
                                                             direction for righ
                                                            t motor
  106 00000062 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT ;; set fron
                                                            t direction for lef
                                                            t motor
  107 00000066         ;;----------------------END CONF_MOTORS
  108 00000066         
  109 00000066 F04F 0A80       MOV              R10, #0x80  ;; Setup R10 with v
                                                            alue for the defaul
                                                            t mode : 0x80 for C
                                                            lassic mode 
  110 0000006A         ;;           && 0x40 for Labyrinth mode
  111 0000006A         
  112 0000006A         main_loop
  113 0000006A 683B            LDR              R3, [R7]    ;; Get Switchs Entr
                                                            ies Values
  114 0000006C F8D8 4000       LDR              R4, [R8]    ;; Get Bumper Entri
                                                            es Values
  115 00000070         
  116 00000070         ;----------------------CHECK SWITCHS STATUS
  117 00000070 2B00            CMP              R3, #0x00   ;; If all the switc
                                                            hs are pressed
  118 00000072 D002            BEQ              end_check_switchs ;; Jump to en
                                                            d_switchs
  119 00000074 2BC0            CMP              R3, #0xC0   ;; If no switchs ar
                                                            e pressed
  120 00000076 D000            BEQ              end_check_switchs ;; Jump to en
                                                            d_switchs
  121 00000078 469A            MOV              R10, R3     ;; Store in R10 the
                                                             value of the press
                                                            ed switch
  122 0000007A         end_check_switchs
  123 0000007A         ;----------------------END CHECK SWITCHs STATUS
  124 0000007A         
  125 0000007A         ;----------------------CHOOSE MODE
  126 0000007A F1BA 0F80       CMP              R10, #0x80  ;; If Switchs Statu
                                                            s == Classic mode
  127 0000007E D002            BEQ              classic_mode ;; Go to Classic m
                                                            ode branch
  128 00000080 F1BA 0F40       CMP              R10, #0x40  ;; If Switchs Statu
                                                            s == Labyrinth mode
                                                            
  129 00000084 D025            BEQ              labyrinth_mode ;; Go to Labyrin
                                                            th mode branch
  130 00000086         



ARM Macro Assembler    Page 6 


  131 00000086         ;----------------------Classic mode
  132 00000086         classic_mode
  133 00000086 F000 F868       BL               WAIT        ;; Wait for few ite
                                                            rations to tempo th
                                                            e programm
  134 0000008A 2C01            CMP              R4, #0x01   ;; R4 == 0x01
  135 0000008C D005            BEQ              c_left_bumper ;; If left bumper
                                                             pressed then go to
                                                             c_left_bumper bran
                                                            ch
  136 0000008E 2C02            CMP              R4, #0x02   ;; R4 == 0x02
  137 00000090 D00A            BEQ              c_right_bumper ;; If right bump
                                                            er pressed then go 
                                                            to c_right_bumper b
                                                            ranch
  138 00000092 2C03            CMP              R4, #0x03   ;; R4 == 0x03
  139 00000094 D00F            BEQ              c_bumpers_not_pressed ;; If bum
                                                            pers not pressed th
                                                            en go to c_bumpers_
                                                            not_pressed branch
  140 00000096 2C00            CMP              R4, #0x00   ;; R4 == 0x00
  141 00000098 D014            BEQ              c_all_bumpers_pressed ;; If all
                                                             bumpers pressed th
                                                            en go to c_all_bump
                                                            ers_pressed branch
  142 0000009A         c_left_bumper
  143 0000009A F04F 0220       MOV              R2, #0x20   ;; Change LEDS valu
                                                            es to turn on only 
                                                            left LED
  144 0000009E F7FF FFFE       BL               MOTEUR_DROIT_AVANT ;; Set front
                                                             direction for righ
                                                            t motor
  145 000000A2 F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE ;; Set ba
                                                            ck direction for le
                                                            ft motor
  146 000000A6 E04F            B                end_choose_mode ;; Go to end_ch
                                                            oose_mode branch
  147 000000A8         c_right_bumper
  148 000000A8 F04F 0210       MOV              R2, #0x10   ;; Change LEDS valu
                                                            es to turn on only 
                                                            right LED
  149 000000AC F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE ;; Set bac
                                                            k direction for rig
                                                            ht motor
  150 000000B0 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT ;; Set fron
                                                            t direction for lef
                                                            t motor
  151 000000B4 E048            B                end_choose_mode ;; Go to end_ch
                                                            oose_mode branch
  152 000000B6         c_bumpers_not_pressed
  153 000000B6 F04F 0200       MOV              R2, #0x00   ;; Change LEDS valu
                                                            es to turn off LEDS
                                                            
  154 000000BA F7FF FFFE       BL               MOTEUR_DROIT_AVANT ;; Set front
                                                             direction for righ
                                                            t motor 
  155 000000BE F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT ;; Set fron
                                                            t direction for lef
                                                            t motor 



ARM Macro Assembler    Page 7 


  156 000000C2 E041            B                end_choose_mode ;; Go to end_ch
                                                            oose_mode branch
  157 000000C4         c_all_bumpers_pressed
  158 000000C4 F04F 0230       MOV              R2, #0x30   ;; Change LEDS valu
                                                            es to turn on all L
                                                            EDS
  159 000000C8 F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE ;; Set bac
                                                            k direction for rig
                                                            ht motor 
  160 000000CC F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE ;; Set ba
                                                            ck direction for le
                                                            ft motor
  161 000000D0 E03A            B                end_choose_mode ;; Go to end_ch
                                                            oose_mode branch
  162 000000D2         
  163 000000D2         ;----------------------Labyrinth mode
  164 000000D2         labyrinth_mode
  165 000000D2 F000 F842       BL               WAIT        ;; Wait for few ite
                                                            rations to tempo th
                                                            e programm
  166 000000D6 F04F 0230       MOV              R2, #0x30   ;; Change LEDS valu
                                                            es to turn on all L
                                                            EDS
  167 000000DA 2C03            CMP              R4, #0x03   ;; R4 == 0x03
  168 000000DC D000            BEQ              algo_res    ;; If bumpers not p
                                                            ressed then go to a
                                                            lgo_res branch
  169 000000DE E033            B                end_choose_mode ;; Else go to e
                                                            nd_choose_mode bran
                                                            ch
  170 000000E0         
  171 000000E0         algo_res
  172 000000E0         ;; Right 90¬∞ Rotation
  173 000000E0 F04F 0B0D       LDR              R11, =ROTATION_ITERATIONS ;; In
                                                            it R11 with the num
                                                            ber of iterations n
                                                            eeded to do a 90¬∞ 
                                                            rotation
  174 000000E4         
  175 000000E4         right_rotation
  176 000000E4 F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE ;; Set bac
                                                            k direction for rig
                                                            ht motor 
  177 000000E8 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT ;; Set fron
                                                            t direction for lef
                                                            t motor
  178 000000EC F000 F835       BL               WAIT        ;; Wait for few ite
                                                            rations to tempo th
                                                            e programm
  179 000000F0 F1BB 0B01       SUBS             R11, #0x01  ;; R11 = R11 - 0x01
                                                            
  180 000000F4 D1F6            BNE              right_rotation ;; If R11 != 0x0
                                                            0 go to right_rotat
                                                            ion branch
  181 000000F6         ;; End Right 90¬∞ Rotation
  182 000000F6         
  183 000000F6         go_forward
  184 000000F6         ;; Go Forward
  185 000000F6 F04F 0B19       LDR              R11, =DISTANCE_ITERATIONS ;; In



ARM Macro Assembler    Page 8 


                                                            it R11 with the num
                                                            ber of iterations n
                                                            eeded to do a dista
                                                            nce
  186 000000FA F04F 0C00       MOV              R12, #0x00  ;; Init R12 with 0x
                                                            00
  187 000000FE         go_forward_loop
  188 000000FE F7FF FFFE       BL               MOTEUR_DROIT_AVANT ;; Set front
                                                             direction for righ
                                                            t motor 
  189 00000102 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT ;; Set fron
                                                            t direction for lef
                                                            t motor 
  190 00000106 F000 F828       BL               WAIT        ;; Wait for few ite
                                                            rations to tempo th
                                                            e programm
  191 0000010A F10C 0C01       ADD              R12, #0x01  ;; Incrementing R12
                                                             (Contains the numb
                                                            er of iterations pe
                                                            rformed in real tim
                                                            e)
  192 0000010E F8D8 4000       LDR              R4, [R8]    ;; Get Bumper Entri
                                                            es Values
  193 00000112 2C03            CMP              R4, #0x03   ;; Bumpers Status =
                                                            = Bumpers not press
                                                            ed
  194 00000114 D103            BNE              actives_bumpers ;; If not equal
                                                             go to actives_bump
                                                            ers branch
  195 00000116 F1BB 0B01       SUBS             R11, #0x01  ;; R11 = R11 - 0x01
                                                            
  196 0000011A D1F0            BNE              go_forward_loop ;; If R11 != 0x
                                                            00 go to go_forward
                                                            _loop
  197 0000011C         ;; End Go Forward
  198 0000011C         
  199 0000011C E014            B                end_choose_mode ;; Go to end_ch
                                                            oose_mode branch
  200 0000011E         actives_bumpers
  201 0000011E         
  202 0000011E         ;; Go Backwards
  203 0000011E         go_backwards
  204 0000011E F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE ;; Set bac
                                                            k direction for rig
                                                            ht motor
  205 00000122 F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE ;; Set ba
                                                            ck direction for le
                                                            ft motor
  206 00000126 F000 F818       BL               WAIT        ;; Wait for few ite
                                                            rations to tempo th
                                                            e programm 
  207 0000012A F1BC 0C01       SUBS             R12, #0x01  ;; R12 = R12 - 0x01
                                                            
  208 0000012E D1F6            BNE              go_backwards ;; If R12 != 0x00 
                                                            go to go_backwards 
                                                            branch
  209 00000130         ;; End Go Backwards 
  210 00000130         
  211 00000130         ;; Left 90¬∞ Rotation



ARM Macro Assembler    Page 9 


  212 00000130 F04F 0B0D       LDR              R11, =ROTATION_ITERATIONS ;; In
                                                            it R11 with the num
                                                            ber of iterations n
                                                            eeded to do a 90¬∞ 
                                                            rotation
  213 00000134         
  214 00000134         left_rotation
  215 00000134 F7FF FFFE       BL               MOTEUR_DROIT_AVANT ;; Set front
                                                             direction for righ
                                                            t motor 
  216 00000138 F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE ;; Set ba
                                                            ck direction for le
                                                            ft motor
  217 0000013C F000 F80D       BL               WAIT        ;; Wait for few ite
                                                            rations to tempo th
                                                            e programm
  218 00000140 F1BB 0B01       SUBS             R11, #0x01  ;; R11 = R11 - 0x01
                                                            
  219 00000144 D1F6            BNE              left_rotation ;; If R11 != 0x00
                                                             go to left_rotatio
                                                            n
  220 00000146         ;; End Left 90¬∞ Rotation
  221 00000146         
  222 00000146 E7D6            B                go_forward  ;; Go to go_forward
                                                             branch
  223 00000148         
  224 00000148         end_choose_mode
  225 00000148         ;----------------------END CHOOSE MODE
  226 00000148         
  227 00000148         ;----------------------BLINKING LED
  228 00000148 F04F 0900       MOV              R9, #0x00   ;; 0x00 --> LEDS Of
                                                            f Value
  229 0000014C F8C5 9000       STR              R9, [R5]    ;; Turn off LEDS wi
                                                            th 0x00  
  230 00000150 F000 F803       BL               WAIT        ;; Wait between LED
                                                            S on/off 
  231 00000154 602A            STR              R2, [R5]    ;; Turn on LEDS tha
                                                            t correspond to por
                                                            tF broche 4 & 5 val
                                                            ues : 00110000 => R
                                                            2
  232 00000156         ;----------------------END BLINKING LED
  233 00000156         
  234 00000156 E788            b                main_loop   ;; Return to the be
                                                            ginning of the main
                                                             loop
  235 00000158 4770            BX               LR          ;; Back to the cont
                                                            inuation of the con
                                                            nection link
  236 0000015A         
  237 0000015A         ;----------------------Function Wait (Iterates to WAIT_I
                       TERATIONS out)
  238 0000015A F8DF 9038 
                       WAIT    LDR              R9, =WAIT_ITERATIONS ;; Initial
                                                            ization of the numb
                                                            er of loop turns
  239 0000015E F1B9 0901 
                       wait_loop
                               SUBS             R9, #0x01   ;; R9 - 0x01



ARM Macro Assembler    Page 10 


  240 00000162 D1FC            BNE              wait_loop   ;; As long as R9 !=
                                                             0 return to wait_l
                                                            oop
  241 00000164 4770            BX               LR          ;; Back to the cont
                                                            inuation of the con
                                                            nection link
  242 00000166         ;----------------------END Function Wait
  243 00000166 BF00            NOP
  244 00000168                 END
              400FE108 
              4000751C 
              40007510 
              40007300 
              4002451C 
              40024510 
              4002400C 
              40025400 
              4002551C 
              40025500 
              400250C0 
              000FFFFF 
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=.\main.d
 -o.\main.o -I"C:\Program Files\Keil\ARM\RV31\INC" -I"C:\Program Files\Keil\ARM
\CMSIS\Include" -I"C:\Program Files\Keil\ARM\Inc\Luminary" --predefine="__EVAL 
SETA 1" --predefine="__MICROLIB SETA 1" --list=.\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 7 in file main.s
   Uses
      None
Comment: .text unused
WAIT 0000015A

Symbol: WAIT
   Definitions
      At line 238 in file main.s
   Uses
      At line 133 in file main.s
      At line 165 in file main.s
      At line 178 in file main.s
      At line 190 in file main.s
      At line 206 in file main.s
      At line 217 in file main.s
      At line 230 in file main.s

__main 00000000

Symbol: __main
   Definitions
      At line 60 in file main.s
   Uses
      At line 43 in file main.s
Comment: __main used once
actives_bumpers 0000011E

Symbol: actives_bumpers
   Definitions
      At line 200 in file main.s
   Uses
      At line 194 in file main.s
Comment: actives_bumpers used once
algo_res 000000E0

Symbol: algo_res
   Definitions
      At line 171 in file main.s
   Uses
      At line 168 in file main.s
Comment: algo_res used once
c_all_bumpers_pressed 000000C4

Symbol: c_all_bumpers_pressed
   Definitions
      At line 157 in file main.s
   Uses
      At line 141 in file main.s
Comment: c_all_bumpers_pressed used once
c_bumpers_not_pressed 000000B6

Symbol: c_bumpers_not_pressed
   Definitions
      At line 152 in file main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 139 in file main.s
Comment: c_bumpers_not_pressed used once
c_left_bumper 0000009A

Symbol: c_left_bumper
   Definitions
      At line 142 in file main.s
   Uses
      At line 135 in file main.s
Comment: c_left_bumper used once
c_right_bumper 000000A8

Symbol: c_right_bumper
   Definitions
      At line 147 in file main.s
   Uses
      At line 137 in file main.s
Comment: c_right_bumper used once
classic_mode 00000086

Symbol: classic_mode
   Definitions
      At line 132 in file main.s
   Uses
      At line 127 in file main.s
Comment: classic_mode used once
end_check_switchs 0000007A

Symbol: end_check_switchs
   Definitions
      At line 122 in file main.s
   Uses
      At line 118 in file main.s
      At line 120 in file main.s

end_choose_mode 00000148

Symbol: end_choose_mode
   Definitions
      At line 224 in file main.s
   Uses
      At line 146 in file main.s
      At line 151 in file main.s
      At line 156 in file main.s
      At line 161 in file main.s
      At line 169 in file main.s
      At line 199 in file main.s

go_backwards 0000011E

Symbol: go_backwards
   Definitions
      At line 203 in file main.s
   Uses
      At line 208 in file main.s
Comment: go_backwards used once
go_forward 000000F6




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: go_forward
   Definitions
      At line 183 in file main.s
   Uses
      At line 222 in file main.s
Comment: go_forward used once
go_forward_loop 000000FE

Symbol: go_forward_loop
   Definitions
      At line 187 in file main.s
   Uses
      At line 196 in file main.s
Comment: go_forward_loop used once
labyrinth_mode 000000D2

Symbol: labyrinth_mode
   Definitions
      At line 164 in file main.s
   Uses
      At line 129 in file main.s
Comment: labyrinth_mode used once
left_rotation 00000134

Symbol: left_rotation
   Definitions
      At line 214 in file main.s
   Uses
      At line 219 in file main.s
Comment: left_rotation used once
main_loop 0000006A

Symbol: main_loop
   Definitions
      At line 112 in file main.s
   Uses
      At line 234 in file main.s
Comment: main_loop used once
right_rotation 000000E4

Symbol: right_rotation
   Definitions
      At line 175 in file main.s
   Uses
      At line 180 in file main.s
Comment: right_rotation used once
wait_loop 0000015E

Symbol: wait_loop
   Definitions
      At line 239 in file main.s
   Uses
      At line 240 in file main.s
Comment: wait_loop used once
20 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

DISTANCE_ITERATIONS 00000019

Symbol: DISTANCE_ITERATIONS
   Definitions
      At line 40 in file main.s
   Uses
      At line 185 in file main.s
Comment: DISTANCE_ITERATIONS used once
GPIO_O_DEN 0000051C

Symbol: GPIO_O_DEN
   Definitions
      At line 22 in file main.s
   Uses
      At line 74 in file main.s
      At line 83 in file main.s
      At line 94 in file main.s

GPIO_O_DIR 00000400

Symbol: GPIO_O_DIR
   Definitions
      At line 14 in file main.s
   Uses
      At line 92 in file main.s
Comment: GPIO_O_DIR used once
GPIO_O_DR2R 00000500

Symbol: GPIO_O_DR2R
   Definitions
      At line 18 in file main.s
   Uses
      At line 96 in file main.s
Comment: GPIO_O_DR2R used once
GPIO_O_PUR 00000510

Symbol: GPIO_O_PUR
   Definitions
      At line 25 in file main.s
   Uses
      At line 76 in file main.s
      At line 85 in file main.s

GPIO_PORTD_BASE 40007000

Symbol: GPIO_PORTD_BASE
   Definitions
      At line 28 in file main.s
   Uses
      At line 74 in file main.s
      At line 76 in file main.s
      At line 78 in file main.s

GPIO_PORTE_BASE 40024000

Symbol: GPIO_PORTE_BASE
   Definitions
      At line 29 in file main.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 83 in file main.s
      At line 85 in file main.s
      At line 87 in file main.s

GPIO_PORTF_BASE 40025000

Symbol: GPIO_PORTF_BASE
   Definitions
      At line 30 in file main.s
   Uses
      At line 92 in file main.s
      At line 94 in file main.s
      At line 96 in file main.s
      At line 98 in file main.s

PINSD_6_7 000000C0

Symbol: PINSD_6_7
   Definitions
      At line 33 in file main.s
   Uses
      At line 73 in file main.s
      At line 78 in file main.s

PINSE_1_2 00000003

Symbol: PINSE_1_2
   Definitions
      At line 34 in file main.s
   Uses
      At line 82 in file main.s
      At line 87 in file main.s

PINSF_4_5 00000030

Symbol: PINSF_4_5
   Definitions
      At line 35 in file main.s
   Uses
      At line 91 in file main.s
      At line 98 in file main.s

ROTATION_ITERATIONS 0000000D

Symbol: ROTATION_ITERATIONS
   Definitions
      At line 39 in file main.s
   Uses
      At line 173 in file main.s
      At line 212 in file main.s

SYSCTL_PERIPH_GPIOF 400FE108

Symbol: SYSCTL_PERIPH_GPIOF
   Definitions
      At line 10 in file main.s
   Uses
      At line 63 in file main.s
Comment: SYSCTL_PERIPH_GPIOF used once



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

WAIT_ITERATIONS 000FFFFF

Symbol: WAIT_ITERATIONS
   Definitions
      At line 38 in file main.s
   Uses
      At line 238 in file main.s
Comment: WAIT_ITERATIONS used once
14 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

MOTEUR_DROIT_ARRIERE 00000000

Symbol: MOTEUR_DROIT_ARRIERE
   Definitions
      At line 51 in file main.s
   Uses
      At line 149 in file main.s
      At line 159 in file main.s
      At line 176 in file main.s
      At line 204 in file main.s

MOTEUR_DROIT_AVANT 00000000

Symbol: MOTEUR_DROIT_AVANT
   Definitions
      At line 50 in file main.s
   Uses
      At line 105 in file main.s
      At line 144 in file main.s
      At line 154 in file main.s
      At line 188 in file main.s
      At line 215 in file main.s

MOTEUR_DROIT_INVERSE 00000000

Symbol: MOTEUR_DROIT_INVERSE
   Definitions
      At line 52 in file main.s
   Uses
      None
Comment: MOTEUR_DROIT_INVERSE unused
MOTEUR_DROIT_OFF 00000000

Symbol: MOTEUR_DROIT_OFF
   Definitions
      At line 49 in file main.s
   Uses
      None
Comment: MOTEUR_DROIT_OFF unused
MOTEUR_DROIT_ON 00000000

Symbol: MOTEUR_DROIT_ON
   Definitions
      At line 48 in file main.s
   Uses
      At line 103 in file main.s
Comment: MOTEUR_DROIT_ON used once
MOTEUR_GAUCHE_ARRIERE 00000000

Symbol: MOTEUR_GAUCHE_ARRIERE
   Definitions
      At line 57 in file main.s
   Uses
      At line 145 in file main.s
      At line 160 in file main.s
      At line 205 in file main.s
      At line 216 in file main.s

MOTEUR_GAUCHE_AVANT 00000000



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols


Symbol: MOTEUR_GAUCHE_AVANT
   Definitions
      At line 56 in file main.s
   Uses
      At line 106 in file main.s
      At line 150 in file main.s
      At line 155 in file main.s
      At line 177 in file main.s
      At line 189 in file main.s

MOTEUR_GAUCHE_INVERSE 00000000

Symbol: MOTEUR_GAUCHE_INVERSE
   Definitions
      At line 58 in file main.s
   Uses
      None
Comment: MOTEUR_GAUCHE_INVERSE unused
MOTEUR_GAUCHE_OFF 00000000

Symbol: MOTEUR_GAUCHE_OFF
   Definitions
      At line 55 in file main.s
   Uses
      None
Comment: MOTEUR_GAUCHE_OFF unused
MOTEUR_GAUCHE_ON 00000000

Symbol: MOTEUR_GAUCHE_ON
   Definitions
      At line 54 in file main.s
   Uses
      At line 104 in file main.s
Comment: MOTEUR_GAUCHE_ON used once
MOTEUR_INIT 00000000

Symbol: MOTEUR_INIT
   Definitions
      At line 46 in file main.s
   Uses
      At line 102 in file main.s
Comment: MOTEUR_INIT used once
11 symbols
379 symbols in table
