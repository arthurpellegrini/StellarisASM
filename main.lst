


ARM Macro Assembler    Page 1 


    1 00000000         ;; RK - Evalbot (Cortex M3 de Texas Instrument)
    2 00000000         ; programme - Pilotage 2 Moteurs Evalbot par PWM tout en
                        ASM (Evalbot tourne sur lui même)
    3 00000000         
    4 00000000         
    5 00000000         
    6 00000000                 AREA             |.text|, CODE, READONLY
    7 00000000         
    8 00000000         
    9 00000000         ; This register controls the clock gating logic in norma
                       l Run mode
   10 00000000 400FE108 
                       SYSCTL_PERIPH_GPIOF
                               EQU              0x400FE108  ; SYSCTL_RCGC2_R (p
                                                            291 datasheet de lm
                                                            3s9b92.pdf)
   11 00000000         
   12 00000000         ; The GPIODATA register is the data register
   13 00000000 40007000 
                       GPIO_PORTD_BASE
                               EQU              0x40007000  ; GPIO Port D (APB)
                                                             base: 0x4000.7000
   14 00000000 40024000 
                       GPIO_PORTE_BASE
                               EQU              0x40024000  ; GPIO Port E (APB)
                                                             base: 0x4002.4000
   15 00000000 40025000 
                       GPIO_PORTF_BASE
                               EQU              0x40025000  ; GPIO Port F (APB)
                                                             base: 0x4002.5000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)
   16 00000000         
   17 00000000         ; configure the corresponding pin to be an output
   18 00000000         ; all GPIO pins are inputs by default
   19 00000000 00000400 
                       GPIO_O_DIR
                               EQU              0x00000400  ; GPIO Direction (p
                                                            417 datasheet de lm
                                                            3s9B92.pdf)
   20 00000000         
   21 00000000         ; The GPIODR2R register is the 2-mA drive control regist
                       er
   22 00000000         ; By default, all GPIO pins have 2-mA drive.
   23 00000000 00000500 
                       GPIO_O_DR2R
                               EQU              0x00000500  ; GPIO 2-mA Drive S
                                                            elect (p428 datashe
                                                            et de lm3s9B92.pdf)
                                                            
   24 00000000         
   25 00000000         ; Digital enable register
   26 00000000         ; To use the pin as a digital input or output, the corre
                       sponding GPIODEN bit must be set.
   27 00000000 0000051C 
                       GPIO_O_DEN
                               EQU              0x0000051C  ; GPIO Digital Enab
                                                            le (p437 datasheet 
                                                            de lm3s9B92.pdf)



ARM Macro Assembler    Page 2 


   28 00000000         
   29 00000000         ; The GPIOPUR register is the pull-up control register
   30 00000000 00000510 
                       GPIO_O_PUR
                               EQU              0x00000510
   31 00000000         
   32 00000000         ; PINS port input
   33 00000000 000000C0 
                       PINSD_6_7
                               EQU              0xC0        ; switch 1 & 2 sur 
                                                            broches 6 & 7 (1100
                                                             0000)
   34 00000000 00000003 
                       PINSE_1_2
                               EQU              0x03        ; bumpers 1 & 2 sur
                                                             les broches (0000 
                                                            0011)
   35 00000000         
   36 00000000         ; PINS port output
   37 00000000 00000030 
                       PINSF_4_5
                               EQU              0x30        ; led 1 & 2 sur bro
                                                            ches 4 & 5 (0011 00
                                                            00)
   38 00000000         
   39 00000000         ; Blinking frequency
   40 00000000 002FFFFF 
                       DUREE   EQU              0x002FFFFF  ; Random Value
   41 00000000         
   42 00000000         ; Boucle d'attente
   43 00000000         WAIT
   44 00000000 F8DF A0F0       ldr              r10, =0x0FFFFF
   45 00000004 F1BA 0A01 
                       wait    subs             r10, #1
   46 00000008 D1FC            bne              wait
   47 0000000A 4770            BX               LR
   48 0000000C         
   49 0000000C         
   50 0000000C         ;-----------------------CONFIGURATION LED
   51 0000000C         CONFIGURATION_LED
   52 0000000C F04F 0A30       ldr              r10, = PINSF_4_5
   53 00000010 4F39            ldr              r7, = GPIO_PORTF_BASE+GPIO_O_DI
R
   54 00000012 F8C7 A000       str              r10, [r7]
   55 00000016         
   56 00000016 4F39            ldr              r7, = GPIO_PORTF_BASE+GPIO_O_DE
N
   57 00000018 F8C7 A000       str              r10, [r7]
   58 0000001C         
   59 0000001C 4F38            ldr              r7, = GPIO_PORTF_BASE+GPIO_O_DR
2R
   60 0000001E F8C7 A000       str              r10, [r7]
   61 00000022         
   62 00000022         ; allumer les leds
   63 00000022 F04F 0330       mov              r3, #PINSF_4_5
   64 00000026         
   65 00000026         ;; Allume portF broches 4 et 5        
   66 00000026 4F37            ldr              r7, = GPIO_PORTF_BASE + (PINSF_
4_5<<2)



ARM Macro Assembler    Page 3 


   67 00000028         
   68 00000028         ;; pour eteindre LED 
   69 00000028 F04F 0200       mov              r2, #0x000
   70 0000002C 4770            BX               LR
   71 0000002E         
   72 0000002E         ;-----------------------CONFIGURATION SWITCH
   73 0000002E         CONFIGURATION_SWITCH
   74 0000002E F04F 0AC0       ldr              r10, = PINSD_6_7
   75 00000032         
   76 00000032 F8DF 80D4       ldr              r8, = GPIO_PORTD_BASE+GPIO_O_DE
N
   77 00000036 F8C8 A000       str              r10, [r8]
   78 0000003A         
   79 0000003A F8DF 80D0       ldr              r8, = GPIO_PORTD_BASE+GPIO_O_PU
R
   80 0000003E F8C8 A000       str              r10, [r8]
   81 00000042         
   82 00000042 F8DF 80CC       ldr              r8, = GPIO_PORTD_BASE + (PINSD_
6_7<<2)
   83 00000046 4770            BX               LR
   84 00000048         
   85 00000048         ;----------------------CONFIGURATION BUMPER
   86 00000048         CONFIGURATION_BUMPER
   87 00000048 F04F 0A03       ldr              r10, = PINSE_1_2
   88 0000004C         
   89 0000004C F8DF 90C4       ldr              r9, = GPIO_PORTE_BASE+GPIO_O_DE
N
   90 00000050 F8C9 A000       str              r10, [r9]
   91 00000054         
   92 00000054 F8DF 90C0       ldr              r9, = GPIO_PORTE_BASE+GPIO_O_PU
R
   93 00000058 F8C9 A000       str              r10, [r9]
   94 0000005C F8DF 90BC       ldr              r9, = GPIO_PORTE_BASE + (PINSE_
1_2<<2)
   95 00000060 4770            BX               LR
   96 00000062         
   97 00000062         ;----------------------GET_ENTRIES
   98 00000062         GET_ENTRIES
   99 00000062 F8D8 4000       ldr              r4, [r8]    ;; on récupère le
                                                            s entrées des swit
                                                            chs
  100 00000066 F8D9 5000       ldr              r5, [r9]    ;; on récupère le
                                                            s entrées des bump
                                                            ers
  101 0000006A 4770            BX               LR
  102 0000006C         
  103 0000006C         ;----------------------BLINKING LED
  104 0000006C         BLINKING_LED
  105 0000006C 603A            str              r2, [r7]    ;; Eteint LED car r
                                                            3 = 0x00  
  106 0000006E         
  107 0000006E         ;wait
  108 0000006E F8DF A084       ldr              r10, =0x0FFFFF
  109 00000072         wait_bl_led1
  110 00000072 F1BA 0A01       subs             r10, #1
  111 00000076 D1FC            bne              wait_bl_led1
  112 00000078         ;fin wait
  113 00000078         
  114 00000078 603B            str              r3, [r7]    ;; Allume portF bro



ARM Macro Assembler    Page 4 


                                                            che 4 & 5 : 0011000
                                                            0 (contenu de r3)
  115 0000007A         
  116 0000007A         ;wait
  117 0000007A F8DF A078       ldr              r10, =0x0FFFFF
  118 0000007E         wait_bl_led2
  119 0000007E F1BA 0A01       subs             r10, #1
  120 00000082 D1FC            bne              wait_bl_led2
  121 00000084         ;fin wait
  122 00000084 4770            BX               LR
  123 00000086         
  124 00000086                 ENTRY
  125 00000086                 EXPORT           __main
  126 00000086         
  127 00000086         ;; The IMPORT command specifies that a symbol is defined
                        in a shared object at runtime.
  128 00000086                 IMPORT           MOTEUR_INIT ; initialise les mo
                                                            teurs (configure le
                                                            s pwms + GPIO)
  129 00000086         
  130 00000086                 IMPORT           MOTEUR_DROIT_ON ; activer le mo
                                                            teur droit
  131 00000086                 IMPORT           MOTEUR_DROIT_OFF ; déactiver l
                                                            e moteur droit
  132 00000086                 IMPORT           MOTEUR_DROIT_AVANT ; moteur dro
                                                            it tourne vers l'av
                                                            ant
  133 00000086                 IMPORT           MOTEUR_DROIT_ARRIERE ; moteur d
                                                            roit tourne vers l'
                                                            arrière
  134 00000086                 IMPORT           MOTEUR_DROIT_INVERSE ; inverse 
                                                            le sens de rotation
                                                             du moteur droit
  135 00000086         
  136 00000086                 IMPORT           MOTEUR_GAUCHE_ON ; activer le m
                                                            oteur gauche
  137 00000086                 IMPORT           MOTEUR_GAUCHE_OFF ; déactiver 
                                                            le moteur gauche
  138 00000086                 IMPORT           MOTEUR_GAUCHE_AVANT ; moteur ga
                                                            uche tourne vers l'
                                                            avant
  139 00000086                 IMPORT           MOTEUR_GAUCHE_ARRIERE ; moteur 
                                                            gauche tourne vers 
                                                            l'arrière
  140 00000086                 IMPORT           MOTEUR_GAUCHE_INVERSE ; inverse
                                                             le sens de rotatio
                                                            n du moteur gauche
  141 00000086         
  142 00000086         
  143 00000086         __main
  144 00000086         
  145 00000086         ; ;; Enable the Port F peripheral clock by setting bit 5
                        (0x20 == 0b100000)  (p291 datasheet de lm3s9B96.pdf)
  146 00000086         ; ;;               (GPIO::FEDCBA)
  147 00000086 4F26            ldr              r7, = SYSCTL_PERIPH_GPIOF 
                                                            ;; RCGC2
  148 00000088 F04F 0A38       mov              r10, #0x00000038 ;; Enable cloc
                                                            k sur GPIO F E D (0
                                                            011 1000)



ARM Macro Assembler    Page 5 


  149 0000008C         ; ;;                         (GPIO::FEDCBA)
  150 0000008C F8C7 A000       str              r10, [r7]
  151 00000090         
  152 00000090         ; ;; "There must be a delay of 3 system clocks before an
                       y GPIO reg. access  (p413 datasheet de lm3s9B92.pdf)
  153 00000090 BF00            nop                          ;; tres tres import
                                                            ant....
  154 00000092 BF00            nop
  155 00000094 BF00            nop                          ;; pas necessaire e
                                                            n simu ou en debbug
                                                             step by step...
  156 00000096         
  157 00000096 F7FF FFB9       BL               CONFIGURATION_LED
  158 0000009A F7FF FFC8       BL               CONFIGURATION_SWITCH
  159 0000009E F7FF FFD3       BL               CONFIGURATION_BUMPER
  160 000000A2         
  161 000000A2         ;; BL Branchement vers un lien (sous programme)
  162 000000A2         
  163 000000A2         ; Configure les PWM + GPIO
  164 000000A2 F7FF FFFE       BL               MOTEUR_INIT
  165 000000A6         
  166 000000A6         ; Activer les deux moteurs droit et gauche
  167 000000A6 F7FF FFFE       BL               MOTEUR_DROIT_ON
  168 000000AA F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  169 000000AE         
  170 000000AE         ; Boucle de pilotage des 2 Moteurs (Evalbot tourne sur l
                       ui même)
  171 000000AE         loop
  172 000000AE         ; Evalbot avance droit devant
  173 000000AE F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  174 000000B2 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  175 000000B6         
  176 000000B6         ;; Avancement pendant une période (deux WAIT)
  177 000000B6         ;BL WAIT ; BL (Branchement vers le lien WAIT); possibili
                       té de retour à la suite avec (BX LR)
  178 000000B6         ;BL WAIT
  179 000000B6         
  180 000000B6         ;; Rotation à droite de l'Evalbot pendant une demi-pér
                       iode (1 seul WAIT)
  181 000000B6         ;BL MOTEUR_DROIT_ARRIERE   ; MOTEUR_DROIT_INVERSE
  182 000000B6         
  183 000000B6 F7FF FFD4       BL               GET_ENTRIES
  184 000000BA         
  185 000000BA 2D01            CMP              R5, #0x01
  186 000000BC D00E            BEQ              bumper_gauche
  187 000000BE         
  188 000000BE 2D02            CMP              R5, #0x02
  189 000000C0 D00F            BEQ              bumper_droit
  190 000000C2         
  191 000000C2 2D03            CMP              R5, #0x03
  192 000000C4 D007            BEQ              bumper_not_pressed
  193 000000C6         
  194 000000C6 F7FF FF9B       BL               WAIT
  195 000000CA 2D00            CMP              R5, #0x00
  196 000000CC D000            BEQ              all_bumpers
  197 000000CE         
  198 000000CE E00B            B                fin_bumper
  199 000000D0         all_bumpers
  200 000000D0 F04F 0330       MOV              R3, #0x30



ARM Macro Assembler    Page 6 


  201 000000D4 E008            B                fin_bumper
  202 000000D6         bumper_not_pressed
  203 000000D6 F04F 0300       MOV              R3, #0x00
  204 000000DA E005            B                fin_bumper
  205 000000DC         bumper_gauche
  206 000000DC F04F 0320       MOV              R3, #0x20
  207 000000E0 E002            B                fin_bumper
  208 000000E2         bumper_droit
  209 000000E2 F04F 0310       MOV              R3, #0x10
  210 000000E6 E7FF            B                fin_bumper
  211 000000E8         fin_bumper
  212 000000E8         
  213 000000E8         
  214 000000E8         
  215 000000E8         
  216 000000E8         
  217 000000E8         
  218 000000E8 F7FF FFC0       BL               BLINKING_LED
  219 000000EC         
  220 000000EC         
  221 000000EC E7DF            b                loop
  222 000000EE         
  223 000000EE         ;; retour à la suite du lien de branchement
  224 000000EE 4770            BX               LR
  225 000000F0         
  226 000000F0 BF00            NOP
  227 000000F2                 END
              00 00 000FFFFF 
              40025400 
              4002551C 
              40025500 
              400250C0 
              4000751C 
              40007510 
              40007300 
              4002451C 
              40024510 
              4002400C 
              400FE108 
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=.\main.d
 -o.\main.o -I"C:\Program Files\Keil\ARM\RV31\INC" -I"C:\Program Files\Keil\ARM
\CMSIS\Include" -I"C:\Program Files\Keil\ARM\Inc\Luminary" --predefine="__EVAL 
SETA 1" --predefine="__MICROLIB SETA 1" --list=.\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 6 in file main.s
   Uses
      None
Comment: .text unused
BLINKING_LED 0000006C

Symbol: BLINKING_LED
   Definitions
      At line 104 in file main.s
   Uses
      At line 218 in file main.s
Comment: BLINKING_LED used once
CONFIGURATION_BUMPER 00000048

Symbol: CONFIGURATION_BUMPER
   Definitions
      At line 86 in file main.s
   Uses
      At line 159 in file main.s
Comment: CONFIGURATION_BUMPER used once
CONFIGURATION_LED 0000000C

Symbol: CONFIGURATION_LED
   Definitions
      At line 51 in file main.s
   Uses
      At line 157 in file main.s
Comment: CONFIGURATION_LED used once
CONFIGURATION_SWITCH 0000002E

Symbol: CONFIGURATION_SWITCH
   Definitions
      At line 73 in file main.s
   Uses
      At line 158 in file main.s
Comment: CONFIGURATION_SWITCH used once
GET_ENTRIES 00000062

Symbol: GET_ENTRIES
   Definitions
      At line 98 in file main.s
   Uses
      At line 183 in file main.s
Comment: GET_ENTRIES used once
WAIT 00000000

Symbol: WAIT
   Definitions
      At line 43 in file main.s
   Uses
      At line 194 in file main.s
Comment: WAIT used once
__main 00000086

Symbol: __main



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 143 in file main.s
   Uses
      At line 125 in file main.s
Comment: __main used once
all_bumpers 000000D0

Symbol: all_bumpers
   Definitions
      At line 199 in file main.s
   Uses
      At line 196 in file main.s
Comment: all_bumpers used once
bumper_droit 000000E2

Symbol: bumper_droit
   Definitions
      At line 208 in file main.s
   Uses
      At line 189 in file main.s
Comment: bumper_droit used once
bumper_gauche 000000DC

Symbol: bumper_gauche
   Definitions
      At line 205 in file main.s
   Uses
      At line 186 in file main.s
Comment: bumper_gauche used once
bumper_not_pressed 000000D6

Symbol: bumper_not_pressed
   Definitions
      At line 202 in file main.s
   Uses
      At line 192 in file main.s
Comment: bumper_not_pressed used once
fin_bumper 000000E8

Symbol: fin_bumper
   Definitions
      At line 211 in file main.s
   Uses
      At line 198 in file main.s
      At line 201 in file main.s
      At line 204 in file main.s
      At line 207 in file main.s
      At line 210 in file main.s

loop 000000AE

Symbol: loop
   Definitions
      At line 171 in file main.s
   Uses
      At line 221 in file main.s
Comment: loop used once
wait 00000004




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: wait
   Definitions
      At line 45 in file main.s
   Uses
      At line 46 in file main.s
Comment: wait used once
wait_bl_led1 00000072

Symbol: wait_bl_led1
   Definitions
      At line 109 in file main.s
   Uses
      At line 111 in file main.s
Comment: wait_bl_led1 used once
wait_bl_led2 0000007E

Symbol: wait_bl_led2
   Definitions
      At line 118 in file main.s
   Uses
      At line 120 in file main.s
Comment: wait_bl_led2 used once
17 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

DUREE 002FFFFF

Symbol: DUREE
   Definitions
      At line 40 in file main.s
   Uses
      None
Comment: DUREE unused
GPIO_O_DEN 0000051C

Symbol: GPIO_O_DEN
   Definitions
      At line 27 in file main.s
   Uses
      At line 56 in file main.s
      At line 76 in file main.s
      At line 89 in file main.s

GPIO_O_DIR 00000400

Symbol: GPIO_O_DIR
   Definitions
      At line 19 in file main.s
   Uses
      At line 53 in file main.s
Comment: GPIO_O_DIR used once
GPIO_O_DR2R 00000500

Symbol: GPIO_O_DR2R
   Definitions
      At line 23 in file main.s
   Uses
      At line 59 in file main.s
Comment: GPIO_O_DR2R used once
GPIO_O_PUR 00000510

Symbol: GPIO_O_PUR
   Definitions
      At line 30 in file main.s
   Uses
      At line 79 in file main.s
      At line 92 in file main.s

GPIO_PORTD_BASE 40007000

Symbol: GPIO_PORTD_BASE
   Definitions
      At line 13 in file main.s
   Uses
      At line 76 in file main.s
      At line 79 in file main.s
      At line 82 in file main.s

GPIO_PORTE_BASE 40024000

Symbol: GPIO_PORTE_BASE
   Definitions
      At line 14 in file main.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 89 in file main.s
      At line 92 in file main.s
      At line 94 in file main.s

GPIO_PORTF_BASE 40025000

Symbol: GPIO_PORTF_BASE
   Definitions
      At line 15 in file main.s
   Uses
      At line 53 in file main.s
      At line 56 in file main.s
      At line 59 in file main.s
      At line 66 in file main.s

PINSD_6_7 000000C0

Symbol: PINSD_6_7
   Definitions
      At line 33 in file main.s
   Uses
      At line 74 in file main.s
      At line 82 in file main.s

PINSE_1_2 00000003

Symbol: PINSE_1_2
   Definitions
      At line 34 in file main.s
   Uses
      At line 87 in file main.s
      At line 94 in file main.s

PINSF_4_5 00000030

Symbol: PINSF_4_5
   Definitions
      At line 37 in file main.s
   Uses
      At line 52 in file main.s
      At line 63 in file main.s
      At line 66 in file main.s

SYSCTL_PERIPH_GPIOF 400FE108

Symbol: SYSCTL_PERIPH_GPIOF
   Definitions
      At line 10 in file main.s
   Uses
      At line 147 in file main.s
Comment: SYSCTL_PERIPH_GPIOF used once
12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

MOTEUR_DROIT_ARRIERE 00000000

Symbol: MOTEUR_DROIT_ARRIERE
   Definitions
      At line 133 in file main.s
   Uses
      None
Comment: MOTEUR_DROIT_ARRIERE unused
MOTEUR_DROIT_AVANT 00000000

Symbol: MOTEUR_DROIT_AVANT
   Definitions
      At line 132 in file main.s
   Uses
      At line 173 in file main.s
Comment: MOTEUR_DROIT_AVANT used once
MOTEUR_DROIT_INVERSE 00000000

Symbol: MOTEUR_DROIT_INVERSE
   Definitions
      At line 134 in file main.s
   Uses
      None
Comment: MOTEUR_DROIT_INVERSE unused
MOTEUR_DROIT_OFF 00000000

Symbol: MOTEUR_DROIT_OFF
   Definitions
      At line 131 in file main.s
   Uses
      None
Comment: MOTEUR_DROIT_OFF unused
MOTEUR_DROIT_ON 00000000

Symbol: MOTEUR_DROIT_ON
   Definitions
      At line 130 in file main.s
   Uses
      At line 167 in file main.s
Comment: MOTEUR_DROIT_ON used once
MOTEUR_GAUCHE_ARRIERE 00000000

Symbol: MOTEUR_GAUCHE_ARRIERE
   Definitions
      At line 139 in file main.s
   Uses
      None
Comment: MOTEUR_GAUCHE_ARRIERE unused
MOTEUR_GAUCHE_AVANT 00000000

Symbol: MOTEUR_GAUCHE_AVANT
   Definitions
      At line 138 in file main.s
   Uses
      At line 174 in file main.s
Comment: MOTEUR_GAUCHE_AVANT used once
MOTEUR_GAUCHE_INVERSE 00000000

Symbol: MOTEUR_GAUCHE_INVERSE



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Definitions
      At line 140 in file main.s
   Uses
      None
Comment: MOTEUR_GAUCHE_INVERSE unused
MOTEUR_GAUCHE_OFF 00000000

Symbol: MOTEUR_GAUCHE_OFF
   Definitions
      At line 137 in file main.s
   Uses
      None
Comment: MOTEUR_GAUCHE_OFF unused
MOTEUR_GAUCHE_ON 00000000

Symbol: MOTEUR_GAUCHE_ON
   Definitions
      At line 136 in file main.s
   Uses
      At line 168 in file main.s
Comment: MOTEUR_GAUCHE_ON used once
MOTEUR_INIT 00000000

Symbol: MOTEUR_INIT
   Definitions
      At line 128 in file main.s
   Uses
      At line 164 in file main.s
Comment: MOTEUR_INIT used once
11 symbols
374 symbols in table
